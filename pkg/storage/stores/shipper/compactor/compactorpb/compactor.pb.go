// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/storage/stores/shipper/compactor/compactorpb/compactor.proto

package compactorpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grafana/loki/pkg/logproto"
	github_com_prometheus_common_model "github.com/prometheus/common/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetObjectKeysRequest struct {
	From    github_com_prometheus_common_model.Time `protobuf:"varint,1,opt,name=from,proto3,customtype=github.com/prometheus/common/model.Time" json:"from"`
	Through github_com_prometheus_common_model.Time `protobuf:"varint,2,opt,name=through,proto3,customtype=github.com/prometheus/common/model.Time" json:"through"`
}

func (m *GetObjectKeysRequest) Reset()      { *m = GetObjectKeysRequest{} }
func (*GetObjectKeysRequest) ProtoMessage() {}
func (*GetObjectKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd43a24ff4ef9e6d, []int{0}
}
func (m *GetObjectKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectKeysRequest.Merge(m, src)
}
func (m *GetObjectKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectKeysRequest proto.InternalMessageInfo

type GetObjectKeysResponse struct {
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *GetObjectKeysResponse) Reset()      { *m = GetObjectKeysResponse{} }
func (*GetObjectKeysResponse) ProtoMessage() {}
func (*GetObjectKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd43a24ff4ef9e6d, []int{1}
}
func (m *GetObjectKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetObjectKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetObjectKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetObjectKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetObjectKeysResponse.Merge(m, src)
}
func (m *GetObjectKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetObjectKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetObjectKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetObjectKeysResponse proto.InternalMessageInfo

func (m *GetObjectKeysResponse) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func init() {
	proto.RegisterType((*GetObjectKeysRequest)(nil), "compactorpb.GetObjectKeysRequest")
	proto.RegisterType((*GetObjectKeysResponse)(nil), "compactorpb.GetObjectKeysResponse")
}

func init() {
	proto.RegisterFile("pkg/storage/stores/shipper/compactor/compactorpb/compactor.proto", fileDescriptor_cd43a24ff4ef9e6d)
}

var fileDescriptor_cd43a24ff4ef9e6d = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x77, 0x6d, 0x51, 0xba, 0xe2, 0x25, 0x28, 0x94, 0x0a, 0xdb, 0x9a, 0x8b, 0x05, 0x31,
	0x0b, 0xfa, 0x02, 0xd2, 0x1e, 0x54, 0x3c, 0x08, 0xc5, 0x83, 0x78, 0x4b, 0xe2, 0x34, 0x89, 0x6d,
	0x3a, 0x6b, 0x76, 0x73, 0xe8, 0x45, 0x7c, 0x04, 0x9f, 0x42, 0x7c, 0x94, 0x1e, 0x7b, 0x2c, 0x1e,
	0x8a, 0x4d, 0x2f, 0x1e, 0xfb, 0x08, 0xd2, 0x0d, 0xc5, 0x28, 0x22, 0xe8, 0x69, 0xbf, 0x61, 0xe6,
	0xdf, 0x7f, 0x76, 0x66, 0xd9, 0x89, 0xec, 0x05, 0x42, 0x69, 0x4c, 0xdc, 0x00, 0xcc, 0x09, 0x4a,
	0xa8, 0x30, 0x92, 0x12, 0x12, 0xe1, 0x63, 0x2c, 0x5d, 0x5f, 0x63, 0x81, 0xa4, 0xf7, 0xc9, 0x8e,
	0x4c, 0x50, 0xa3, 0xb5, 0x59, 0x48, 0xd6, 0x0e, 0x83, 0x48, 0x87, 0xa9, 0xe7, 0xf8, 0x18, 0x8b,
	0x00, 0x03, 0x14, 0xa6, 0xc6, 0x4b, 0xbb, 0x26, 0x32, 0x81, 0xa1, 0x5c, 0x5b, 0xdb, 0x5d, 0xba,
	0xf7, 0x31, 0xc8, 0x13, 0x2b, 0xc8, 0x93, 0xf6, 0x33, 0x65, 0xdb, 0xa7, 0xa0, 0x2f, 0xbd, 0x3b,
	0xf0, 0xf5, 0x05, 0x0c, 0x55, 0x07, 0xee, 0x53, 0x50, 0xda, 0x6a, 0xb3, 0x72, 0x37, 0xc1, 0xb8,
	0x4a, 0x1b, 0xb4, 0x59, 0x6a, 0x89, 0xd1, 0xb4, 0x4e, 0x5e, 0xa7, 0xf5, 0xfd, 0x82, 0xb5, 0x4c,
	0x30, 0x06, 0x1d, 0x42, 0xaa, 0x96, 0xed, 0xc6, 0x38, 0x10, 0x31, 0xde, 0x42, 0xdf, 0xb9, 0x8a,
	0x62, 0xe8, 0x18, 0xb1, 0x75, 0xce, 0x36, 0x74, 0x98, 0x60, 0x1a, 0x84, 0xd5, 0xb5, 0xff, 0xdd,
	0xb3, 0xd2, 0xdb, 0x07, 0x6c, 0xe7, 0x5b, 0x9f, 0x4a, 0xe2, 0x40, 0x81, 0x65, 0xb1, 0x72, 0x0f,
	0x86, 0xaa, 0x4a, 0x1b, 0xa5, 0x66, 0xa5, 0x63, 0xf8, 0x08, 0x58, 0xa5, 0xbd, 0x1a, 0x98, 0x75,
	0xcd, 0xb6, 0xbe, 0x28, 0xad, 0x3d, 0xa7, 0x30, 0x4d, 0xe7, 0xa7, 0xd7, 0xd7, 0xec, 0xdf, 0x4a,
	0x72, 0x63, 0x9b, 0xb4, 0x1e, 0xc6, 0x33, 0x4e, 0x26, 0x33, 0x4e, 0x16, 0x33, 0x4e, 0x1f, 0x33,
	0x4e, 0x5f, 0x32, 0x4e, 0x47, 0x19, 0xa7, 0xe3, 0x8c, 0xd3, 0xb7, 0x8c, 0xd3, 0xf7, 0x8c, 0x93,
	0x45, 0xc6, 0xe9, 0xd3, 0x9c, 0x93, 0xf1, 0x9c, 0x93, 0xc9, 0x9c, 0x93, 0x9b, 0xb3, 0xe2, 0xfa,
	0x12, 0xb7, 0xeb, 0x0e, 0x5c, 0xd1, 0xc7, 0x5e, 0x24, 0xfe, 0xfa, 0x4b, 0xbc, 0x75, 0xb3, 0xc3,
	0xe3, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xbe, 0xfe, 0xe0, 0x60, 0x02, 0x00, 0x00,
}

func (this *GetObjectKeysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetObjectKeysRequest)
	if !ok {
		that2, ok := that.(GetObjectKeysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.Through.Equal(that1.Through) {
		return false
	}
	return true
}
func (this *GetObjectKeysResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetObjectKeysResponse)
	if !ok {
		that2, ok := that.(GetObjectKeysResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Keys) != len(that1.Keys) {
		return false
	}
	for i := range this.Keys {
		if this.Keys[i] != that1.Keys[i] {
			return false
		}
	}
	return true
}
func (this *GetObjectKeysRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&compactorpb.GetObjectKeysRequest{")
	s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	s = append(s, "Through: "+fmt.Sprintf("%#v", this.Through)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetObjectKeysResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&compactorpb.GetObjectKeysResponse{")
	s = append(s, "Keys: "+fmt.Sprintf("%#v", this.Keys)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCompactor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CompactorClient is the client API for Compactor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CompactorClient interface {
	GetObjectKeys(ctx context.Context, in *GetObjectKeysRequest, opts ...grpc.CallOption) (*GetObjectKeysResponse, error)
}

type compactorClient struct {
	cc *grpc.ClientConn
}

func NewCompactorClient(cc *grpc.ClientConn) CompactorClient {
	return &compactorClient{cc}
}

func (c *compactorClient) GetObjectKeys(ctx context.Context, in *GetObjectKeysRequest, opts ...grpc.CallOption) (*GetObjectKeysResponse, error) {
	out := new(GetObjectKeysResponse)
	err := c.cc.Invoke(ctx, "/compactorpb.Compactor/GetObjectKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompactorServer is the server API for Compactor service.
type CompactorServer interface {
	GetObjectKeys(context.Context, *GetObjectKeysRequest) (*GetObjectKeysResponse, error)
}

// UnimplementedCompactorServer can be embedded to have forward compatible implementations.
type UnimplementedCompactorServer struct {
}

func (*UnimplementedCompactorServer) GetObjectKeys(ctx context.Context, req *GetObjectKeysRequest) (*GetObjectKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectKeys not implemented")
}

func RegisterCompactorServer(s *grpc.Server, srv CompactorServer) {
	s.RegisterService(&_Compactor_serviceDesc, srv)
}

func _Compactor_GetObjectKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompactorServer).GetObjectKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compactorpb.Compactor/GetObjectKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompactorServer).GetObjectKeys(ctx, req.(*GetObjectKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compactor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compactorpb.Compactor",
	HandlerType: (*CompactorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObjectKeys",
			Handler:    _Compactor_GetObjectKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/storage/stores/shipper/compactor/compactorpb/compactor.proto",
}

func (m *GetObjectKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetObjectKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Through != 0 {
		i = encodeVarintCompactor(dAtA, i, uint64(m.Through))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintCompactor(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetObjectKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetObjectKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetObjectKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintCompactor(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCompactor(dAtA []byte, offset int, v uint64) int {
	offset -= sovCompactor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetObjectKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovCompactor(uint64(m.From))
	}
	if m.Through != 0 {
		n += 1 + sovCompactor(uint64(m.Through))
	}
	return n
}

func (m *GetObjectKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovCompactor(uint64(l))
		}
	}
	return n
}

func sovCompactor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCompactor(x uint64) (n int) {
	return sovCompactor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetObjectKeysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetObjectKeysRequest{`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`Through:` + fmt.Sprintf("%v", this.Through) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetObjectKeysResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetObjectKeysResponse{`,
		`Keys:` + fmt.Sprintf("%v", this.Keys) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCompactor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetObjectKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompactor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= github_com_prometheus_common_model.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Through", wireType)
			}
			m.Through = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Through |= github_com_prometheus_common_model.Time(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompactor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompactor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompactor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetObjectKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompactor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetObjectKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetObjectKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompactor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompactor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompactor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompactor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompactor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompactor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompactor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompactor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompactor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompactor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompactor
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCompactor
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompactor
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompactor(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCompactor
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompactor = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompactor   = fmt.Errorf("proto: integer overflow")
)
